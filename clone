# Cliente MAS: crear SOLO si no existe
[ -f viya_mas_client.py ] || cat > viya_mas_client.py <<'PY'
import os, requests

def _session_no_proxy():
    s = requests.Session()
    s.trust_env = False  # ignora http_proxy/https_proxy del sistema
    return s

def score_row_via_rest(row: dict) -> dict:
    base = (os.getenv("VIYA_URL") or "").rstrip("/")
    module = os.getenv("MAS_MODULE_ID")
    token = os.getenv("BEARER_TOKEN") or os.getenv("SAS_SERVICES_TOKEN")
    if not (base and module and token):
        raise RuntimeError("Faltan VIYA_URL, MAS_MODULE_ID o BEARER_TOKEN/SAS_SERVICES_TOKEN.")
    url = f"{base}/microanalyticScore/modules/{module}/steps/score"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    payload = {"inputs": [{"name": k, "value": v} for k, v in (row or {}).items()]}
    verify = os.getenv("VIYA_CA_BUNDLE") or True
    r = _session_no_proxy().post(url, json=payload, headers=headers,
                                 timeout=float(os.getenv("VIYA_TIMEOUT","30")), verify=verify)
    r.raise_for_status()
    return r.json()
PY

# Stub LLM: crear SOLO si falta (para que la pestaña Assistant no rompa)
mkdir -p llm
[ -f llm/assistant.py ] || cat > llm/assistant.py <<'PY'
def refine_reply_with_llm(base_reply, prob, threshold, row, temperature=0.6, model="stub"):
    return base_reply, "stub"
PY

















cd /home/cloud-user/real-time-scoring
mkdir -p llm score

# viya_mas_client.py (ignora proxies y hace preflight corto)
cat > viya_mas_client.py <<'PY'
import os, requests

def _session_no_proxy():
    s = requests.Session()
    s.trust_env = False  # ignora http_proxy/https_proxy
    return s

def score_row_via_rest(row: dict) -> dict:
    base = (os.getenv("VIYA_URL") or "").rstrip("/")
    module = os.getenv("MAS_MODULE_ID")
    tok = os.getenv("BEARER_TOKEN") or os.getenv("SAS_SERVICES_TOKEN")
    if not (base and module and tok):
        raise RuntimeError("Faltan VIYA_URL, MAS_MODULE_ID o BEARER_TOKEN/SAS_SERVICES_TOKEN.")
    url = f"{base}/microanalyticScore/modules/{module}/steps/score"
    payload = {"inputs":[{"name":k,"value":v} for k,v in (row or {}).items()]}
    headers = {"Authorization": f"Bearer {tok}", "Content-Type":"application/json"}
    verify = os.getenv("VIYA_CA_BUNDLE") or True
    # preflight breve (opcional)
    try:
        _session_no_proxy().get(f"{base}/SASLogon/login", timeout=5, verify=verify)
    except requests.RequestException as e:
        pass  # no bloquea
    r = _session_no_proxy().post(url, json=payload, headers=headers,
                                 timeout=float(os.getenv("VIYA_TIMEOUT","30")),
                                 verify=verify)
    r.raise_for_status()
    return r.json()
PY

# stub del asistente (si app.py lo importa)
cat > llm/assistant.py <<'PY'
def refine_reply_with_llm(base_reply, prob, threshold, row, temperature=0.6, model="stub"):
    return base_reply, "stub"
PY



cd /home/cloud-user
ls -ld real-time-scoring*
# si no existe real-time-scoring actual:
mv real-time-scoring.bak.20251001-181056 real-time-scoring
ls -ld real-time-scoring


# 0) Ir al HOME y respaldar si ya existe la carpeta
cd /home/cloud-user
[ -d real-time-scoring ] && mv real-time-scoring real-time-scoring.bak.$(date +%Y%m%d-%H%M%S)

# 1) Clonar el repo en /home/cloud-user/real-time-scoring
git clone https://github.com/fauseric/sas.git real-time-scoring
cd /home/cloud-user/real-time-scoring
git remote -v   # verificación: debe decir fauseric/sas

# 2) Crear/activar venv y deps mínimas
python3 -m venv ~/.venvs/casapp
source ~/.venvs/casapp/bin/activate
pip install --upgrade pip
pip install "streamlit==1.36.0" "pandas==2.1.4" "requests==2.31.0"
# (opcional CAS): pip install "swat==1.6.1"

# 3) Cliente MAS (solo si NO existe en el repo)
[ -f viya_mas_client.py ] || cat > viya_mas_client.py <<'PY'
import os, requests
from typing import Dict, Any
def score_row_via_rest(row: Dict[str, Any]) -> Dict[str, Any]:
    base = (os.getenv("VIYA_URL") or "").rstrip("/")
    module = os.getenv("MAS_MODULE_ID")
    tok = os.getenv("BEARER_TOKEN") or os.getenv("SAS_SERVICES_TOKEN")
    if not (base and module and tok):
        raise RuntimeError("Faltan VIYA_URL, MAS_MODULE_ID o BEARER_TOKEN/SAS_SERVICES_TOKEN.")
    url = f"{base}/microanalyticScore/modules/{module}/steps/score"
    headers = {"Authorization": f"Bearer {tok}", "Content-Type": "application/json"}
    payload = {"inputs":[{"name":k,"value":v} for k,v in (row or {}).items()]}
    r = requests.post(url, json=payload, headers=headers,
                      timeout=float(os.getenv("VIYA_TIMEOUT","30")),
                      verify=os.getenv("VIYA_CA_BUNDLE") or True)
    r.raise_for_status()
    return r.json()
PY

# 4) (Opcional) Stub si falta llm/assistant.py
mkdir -p llm
[ -f llm/assistant.py ] || cat > llm/assistant.py <<'PY'
def refine_reply_with_llm(base_reply, prob, threshold, row, temperature=0.6, model="stub"):
    return base_reply, "stub"
PY

# 5) Token (usa el que YA tenés guardado; si no, creá el archivo una vez)
mkdir -p ~/.viya
# si aún no lo guardaste:
# printf '%s' '<TU_ACCESS_TOKEN>' > ~/.viya/token.txt
chmod 600 ~/.viya/token.txt

# 6) Lanzar la app con TODAS las vars en línea (evita proxy/entorno)
BEARER_TOKEN="$(cat ~/.viya/token.txt)" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 0.0.0.0 --server.port 8501
