






mkdir -p score
cat > score/inputVar.json <<'JSON'
{
  "creationTimeStamp": "0001-01-01T00:00:00Z",
  "modifiedTimeStamp": "0001-01-01T00:00:00Z",
  "revision": 0,
  "name": "dmcas_scoreinputs",
  "version": 0,
  "order": 0,
  "parameterMap": {
    "NAME":      {"label":"Name","length":255,"order":1,"parameter":"NAME","preformatted":false,"type":"char","values":["NAME"]},
    "format":    {"label":"Variable Format","length":100,"order":7,"parameter":"format","preformatted":false,"type":"char","values":["format"]},
    "label":     {"label":"Variable Label","length":1000,"order":6,"parameter":"label","preformatted":false,"type":"char","values":["label"]},
    "length":    {"label":"Variable Length","length":8,"order":8,"parameter":"length","preformatted":false,"type":"num","values":["length"]},
    "level":     {"label":"Variable Level","length":256,"order":3,"parameter":"level","preformatted":false,"type":"char","values":["level"]},
    "role":      {"label":"Role","length":256,"order":2,"parameter":"role","preformatted":false,"type":"char","values":["role"]},
    "type":      {"label":"Type","length":20,"order":4,"parameter":"type","preformatted":false,"type":"char","values":["type"]},
    "vartype":   {"label":"Variable Type","length":256,"order":5,"parameter":"vartype","preformatted":false,"type":"char","values":["vartype"]}
  },
  "data": [
    {"dataMap":{"NAME":"CLAGE","format":"","label":"","length":"8","level":"INTERVAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":1},
    {"dataMap":{"NAME":"CLNO","format":"","label":"","length":"8","level":"INTERVAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":2},
    {"dataMap":{"NAME":"DEBTINC","format":"","label":"","length":"8","level":"INTERVAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":3},
    {"dataMap":{"NAME":"DELINQ","format":"","label":"","length":"8","level":"NOMINAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":4},
    {"dataMap":{"NAME":"DEROG","format":"","label":"","length":"8","level":"NOMINAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":5},
    {"dataMap":{"NAME":"JOB","format":"","label":"","length":"7","level":"NOMINAL","role":"INPUT","type":"C","vartype":"varchar"},"rowNumber":6},
    {"dataMap":{"NAME":"LOAN","format":"","label":"","length":"8","level":"INTERVAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":7},
    {"dataMap":{"NAME":"MORTDUE","format":"","label":"","length":"8","level":"INTERVAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":8},
    {"dataMap":{"NAME":"NINQ","format":"","label":"","length":"8","level":"NOMINAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":9},
    {"dataMap":{"NAME":"REASON","format":"","label":"","length":"7","level":"BINARY","role":"INPUT","type":"C","vartype":"varchar"},"rowNumber":10},
    {"dataMap":{"NAME":"VALUE","format":"","label":"","length":"8","level":"INTERVAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":11},
    {"dataMap":{"NAME":"YOJ","format":"","label":"","length":"8","level":"INTERVAL","role":"INPUT","type":"N","vartype":"double"},"rowNumber":12}
  ],
  "xInteger": false,
  "yInteger": false
}
JSON

























export VIYA_URL="https://disco-a20237-rg.gelenable.sas.com"
export MODULE_ID="gradient_boosting__interactive-m"
# usa tu bundle
export REQUESTS_CA_BUNDLE="$HOME/viya-full.pem"

python - <<'PY'
import os,requests, json
url=os.environ["VIYA_URL"].rstrip("/")
mod=os.environ["MODULE_ID"]
tok=os.environ.get("BEARER_TOKEN") or os.environ.get("SAS_SERVICES_TOKEN")
sig=requests.get(f"{url}/microanalyticScore/modules/{mod}",
                 headers={"Authorization":f"Bearer {tok}"},
                 timeout=15, verify=os.environ["REQUESTS_CA_BUNDLE"]).json()
ins = (sig.get("signature") or {}).get("inputs") or []
print("Inputs esperados (nombre:type):")
for i in ins: print("-", i["name"], ":", i.get("type"))
PY






BEARER_TOKEN="$BEARER_TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
REQUESTS_CA_BUNDLE="$HOME/viya-full.pem" \
VIYA_CA_BUNDLE="$HOME/viya-full.pem" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501




# (a) Detectar el bundle del sistema (RHEL/Alma/Rocky vs Debian/Ubuntu)
if [ -f /etc/pki/tls/certs/ca-bundle.crt ]; then CAB=/etc/pki/tls/certs/ca-bundle.crt; else CAB=/etc/ssl/certs/ca-certificates.crt; fi
echo "CAB=$CAB"

# (b) Extraer la **cadena** que entrega tu endpoint (server + intermedias + raíz)
openssl s_client -showcerts \
  -servername disco-a20237-rg.gelenable.sas.com \
  -connect   disco-a20237-rg.gelenable.sas.com:443 </dev/null 2>/dev/null \
| awk '/BEGIN CERTIFICATE/{p=1} p; /END CERTIFICATE/{print ""; p=0}' > ~/viya-chain-full.pem

# (c) Quedarnos SOLO con las **CAs** (excluir el primer cert, que es el del servidor)
awk 'BEGIN{n=0} /BEGIN CERTIFICATE/{n++; if(n>1) p=1} p; /END CERTIFICATE/{if(n>1){print ""; p=0}}' \
  ~/viya-chain-full.pem > ~/viya-ca-only.pem

# (d) Bundle final = CA del sistema + CA(s) del endpoint
cat "$CAB" ~/viya-ca-only.pem > ~/viya-full.pem


export VIYA_URL="https://disco-a20237-rg.gelenable.sas.com"
export REQUESTS_CA_BUNDLE="$HOME/viya-full.pem"
export VIYA_CA_BUNDLE="$HOME/viya-full.pem"
export NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1"
export HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy=

python - <<'PY'
import os,requests
u=os.environ["VIYA_URL"].rstrip("/")+"/SASLogon/login"
r=requests.get(u, timeout=10, verify=os.environ["REQUESTS_CA_BUNDLE"])
print("SASLogon:", r.status_code)
PY





curl -s -m 10 --cacert "$HOME/viya-full.pem" \
  -H "Authorization: Bearer $BEARER_TOKEN" \
  "$VIYA_URL/microanalyticScore/modules?limit=1" -w "\nHTTP %{http_code}\n"


cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate 2>/dev/null || true

BEARER_TOKEN="$BEARER_TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
REQUESTS_CA_BUNDLE="$HOME/viya-full.pem" \
VIYA_CA_BUNDLE="$HOME/viya-full.pem" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501

cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate 2>/dev/null || true

BEARER_TOKEN="$TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
REQUESTS_CA_BUNDLE="$HOME/viya-full.pem" \
VIYA_CA_BUNDLE="$HOME/viya-full.pem" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501



# Variables (reemplazá user/pass)
export VIYA_USER="<tu_usuario>"
export VIYA_PASSWORD="<tu_password>"
export VIYA_URL="https://disco-a20237-rg.gelenable.sas.com"

export BEARER_TOKEN=$(
  curl -s --cacert "$HOME/viya-full.pem" \
    -u 'sas.ec:' \
    -d "grant_type=password&username=${VIYA_USER}&password=${VIYA_PASSWORD}&scope=uaa.user" \
    "$VIYA_URL/SASLogon/oauth/token" | python3 -c 'import sys,json;print(json.load(sys.stdin)["access_token"])'
)
test -n "$BEARER_TOKEN" && echo "TOKEN OK" || echo "NO TOKEN"






# Muestra aud/exp del JWT para ver si está vencido
python - <<'PY'
import os,sys,time,base64,json
tok=os.environ.get("BEARER_TOKEN") or os.environ.get("SAS_SERVICES_TOKEN") or ""
try:
    payload=json.loads(base64.urlsafe_b64decode(tok.split('.')[1] + '=='))
    exp=payload.get('exp'); aud=payload.get('aud')
    print("aud:",aud)
    print("exp (epoch):",exp," -> ", time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(exp)) if exp else None)
    print("now (epoch):",int(time.time())," -> ", time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime()))
except Exception as e:
    print("Token ilegible:",e)
PY






cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate 2>/dev/null || true
BEARER_TOKEN="$TOKEN" \
REQUESTS_CA_BUNDLE="$CAB" VIYA_CA_BUNDLE="$CAB" \
VIYA_URL="$VIYA_URL" MAS_MODULE_ID="gradient_boosting__interactive-m" \
NO_PROXY="$NO_PROXY" HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501







# Ruta CA del sistema (detecta RHEL/Ubuntu)
if [ -f /etc/pki/tls/certs/ca-bundle.crt ]; then CAB=/etc/pki/tls/certs/ca-bundle.crt; else CAB=/etc/ssl/certs/ca-certificates.crt; fi

export VIYA_URL="https://disco-a20237-rg.gelenable.sas.com"
export REQUESTS_CA_BUNDLE="$CAB"
export VIYA_CA_BUNDLE="$CAB"
export NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1"
export HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy=

# preflight rápido
python - <<'PY'
import os,requests
u=os.environ["VIYA_URL"].rstrip("/")+"/SASLogon/login"
r=requests.get(u, timeout=10, verify=os.environ["REQUESTS_CA_BUNDLE"])
print("SASLogon:", r.status_code)
PY









export VIYA_URL="https://disco-a20237-rg.gelenable.sas.com"
export REQUESTS_CA_BUNDLE="$HOME/viya-full.pem"

# Debe dar 200/302 (login page)
python - <<'PY'
import os,requests
r = requests.get(os.environ["VIYA_URL"].rstrip("/")+"/SASLogon/login",
                 timeout=10, verify=os.environ["REQUESTS_CA_BUNDLE"])
print("SASLogon:", r.status_code)
PY

# Si tenés $TOKEN válido, probá MAS (debe dar 200)
curl -s -m 10 --cacert "$HOME/viya-full.pem" \
  -H "Authorization: Bearer $TOKEN" \
  "$VIYA_URL/microanalyticScore/modules?limit=1" -w "\nHTTP %{http_code}\n"













# Activá tu venv
source ~/.venvs/casapp/bin/activate 2>/dev/null || true

# (1a) Ruta del bundle que usa requests/certifi
CACERT=$(python - <<'PY'
import certifi; print(certifi.where())
PY
)

# (1b) Cadena completa del server de Viya
openssl s_client -showcerts \
  -servername disco-a20237-rg.gelenable.sas.com \
  -connect disco-a20237-rg.gelenable.sas.com:443 </dev/null 2>/dev/null \
| awk '/BEGIN CERTIFICATE/{p=1} p; /END CERTIFICATE/{print ""; p=0}' > ~/viya-chain.pem

# (1c) Bundle final = certifi + cadena de Viya
cat "$CACERT" ~/viya-chain.pem > ~/viya-full.pem









import sys,json
m=json.load(sys.stdin); ins=(m.get("signature") or {}).get("inputs") or []
print(json.dumps([{"name":i} for i in ins if "name" in i], indent=2))
PY


mkdir -p score
curl -sS -H "Authorization: Bearer $TOKEN" \
  "$VIYA_URL/microanalyticScore/modules/$MAS_MODULE_ID" \
| python3 - <<'PY' > score/inputVar.json



cd /home/cloud-user/real-time-scoring
rm -f sas_code_translator.py
curl -fL -o sas_code_translator.py "https://raw.githubusercontent.com/<tu_org>/<tu_repo>/<branch>/sas_code_translator.py"




cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate 2>/dev/null || true

# usa tu token ya válido en $TOKEN
BEARER_TOKEN="$TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
VIYA_CA_BUNDLE="$HOME/viya-full.pem" \
REQUESTS_CA_BUNDLE="$HOME/viya-full.pem" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501









# 1b) sacar la cadena del servidor (incluye cert servidor + intermedias)
openssl s_client -showcerts \
  -servername disco-a20237-rg.gelenable.sas.com \
  -connect disco-a20237-rg.gelenable.sas.com:443 </dev/null 2>/dev/null \
| awk '/BEGIN CERTIFICATE/{p=1} p; /END CERTIFICATE/{print ""; p=0}' > ~/viya-chain.pem

# 1c) combinar: certifi + cadena de Viya -> bundle final
cat "$CACERT" ~/viya-chain.pem > ~/viya-full.pem







# 1a) Ruta del bundle de certifi (el que usa requests)
python - <<'PY'
import certifi,sys; print(certifi.where())
PY









# sacar la cadena de certificados del endpoint de Viya
openssl s_client -showcerts \
  -servername disco-a20237-rg.gelenable.sas.com \
  -connect disco-a20237-rg.gelenable.sas.com:443 </dev/null 2>/dev/null \
| awk '/BEGIN CERTIFICATE/{p=1} p; /END CERTIFICATE/{print ""; p=0}' > ~/viya-ca.pem


cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate 2>/dev/null || true

BEARER_TOKEN="$TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
VIYA_CA_BUNDLE="$HOME/viya-ca.pem" \
REQUESTS_CA_BUNDLE="$HOME/viya-ca.pem" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501







cd /home/cloud-user/real-time-scoring
mkdir -p score
export VIYA_URL="https://disco-a20237-rg.gelenable.sas.com"
export MAS_MODULE_ID="gradient_boosting__interactive-m"

curl -sS -H "Authorization: Bearer $TOKEN" \
  "$VIYA_URL/microanalyticScore/modules/$MAS_MODULE_ID" \
| python3 - <<'PY' > score/inputVar.json
import sys, json
m=json.load(sys.stdin); ins=(m.get("signature") or {}).get("inputs") or []
print(json.dumps([{"name":i["name"]} for i in ins if "name" in i], indent=2))
PY






cd /home/cloud-user/real-time-scoring
curl -L -o sas_code_translator.py \
  https://raw.githubusercontent.com/fauseric/sas/main/sas_code_translator.py

mkdir -p data
curl -L -o data/hmeq.csv \
  https://raw.githubusercontent.com/fauseric/sas/main/data/hmeq.csv







cd /home/cloud-user
unset SSH_ASKPASS GIT_ASKPASS
git config --global core.askPass ""
git config --global credential.helper ""
export GIT_TERMINAL_PROMPT=1

git clone https://github.com/fauseric/sas.git rt-src





# en la VM
cd /home/cloud-user
git clone https://github.com/fauseric/sas.git rt-src

# copiar el traductor al proyecto actual
cp -n rt-src/sas_code_translator.py /home/cloud-user/real-time-scoring/ \
  || find rt-src -maxdepth 3 -name 'sas_code_translator.py' -exec cp -n {} /home/cloud-user/real-time-scoring/ \;

# (opcional) si el repo trae llm/assistant.py y lo querés igual al repo:
mkdir -p /home/cloud-user/real-time-scoring/llm
cp -n rt-src/llm/assistant.py /home/cloud-user/real-time-scoring/llm/ 2>/dev/null || true





cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate 2>/dev/null || true

# usa el token que ya tenés en $TOKEN
BEARER_TOKEN="$TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501

















env no_proxy=127.0.0.1,localhost \
    firefox --new-window 'http://127.0.0.1:8501' &



# Opción B: Chrome / Chromium
google-chrome --new-window --no-proxy-server 'http://127.0.0.1:8501' &
# o
chromium --new-window --no-proxy-server 'http://127.0.0.1:8501' &





# Opción A: si tenés Firefox
env no_proxy=127.0.0.1,localhost NO_PROXY=127.0.0.1,localhost \
  firefox --new-window 'http://127.0.0.1:8501' &



curl -sSf http://127.0.0.1:8501/healthz && echo "OK" || echo "FALLA"



xdg-open http://127.0.0.1:8501 2>/dev/null || sensible-browser http://127.0.0.1:8501



ssh -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -L 8501:127.0.0.1:8501 cloud-user@<IP_VM>




curl -sSf http://127.0.0.1:8501/healthz && echo "UI OK" || echo "UI NO RESPONDE"




cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate 2>/dev/null || true

BEARER_TOKEN="$TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501



ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 \
    -R 80:localhost:8501 nokey@localhost.run



cd ~
curl -fsSL -o cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
chmod +x cloudflared

./cloudflared tunnel --no-autoupdate --edge-ip-version 4 --protocol http2 \
  --url http://127.0.0.1:8501





curl -sI http://127.0.0.1:8501 | head -n1


tmux new -s rtapp
cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate 2>/dev/null || true

# usa tu token que ya está en $TOKEN
BEARER_TOKEN="$TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501








cd /home/cloud-user/real-time-scoring
source ~/.venvs/casapp/bin/activate

BEARER_TOKEN="$TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 0.0.0.0 --server.port 8501





source ~/.venvs/casapp/bin/activate || (python3 -m venv ~/.venvs/casapp && source ~/.venvs/casapp/bin/activate)
pip install --upgrade pip
pip install "streamlit==1.36.0" "pandas==2.1.4" "requests==2.31.0"
# (si usás el tab CAS y lo tenés configurado): pip install "swat==1.6.1"

# si guardaste el token:
export BEARER_TOKEN="$(cat ~/.viya/token.txt)"

# lanzar (desde la VM)
BEARER_TOKEN="$BEARER_TOKEN" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 0.0.0.0 --server.port 8501







# Cliente MAS: crear SOLO si no existe
[ -f viya_mas_client.py ] || cat > viya_mas_client.py <<'PY'
import os, requests

def _session_no_proxy():
    s = requests.Session()
    s.trust_env = False  # ignora http_proxy/https_proxy del sistema
    return s

def score_row_via_rest(row: dict) -> dict:
    base = (os.getenv("VIYA_URL") or "").rstrip("/")
    module = os.getenv("MAS_MODULE_ID")
    token = os.getenv("BEARER_TOKEN") or os.getenv("SAS_SERVICES_TOKEN")
    if not (base and module and token):
        raise RuntimeError("Faltan VIYA_URL, MAS_MODULE_ID o BEARER_TOKEN/SAS_SERVICES_TOKEN.")
    url = f"{base}/microanalyticScore/modules/{module}/steps/score"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    payload = {"inputs": [{"name": k, "value": v} for k, v in (row or {}).items()]}
    verify = os.getenv("VIYA_CA_BUNDLE") or True
    r = _session_no_proxy().post(url, json=payload, headers=headers,
                                 timeout=float(os.getenv("VIYA_TIMEOUT","30")), verify=verify)
    r.raise_for_status()
    return r.json()
PY

# Stub LLM: crear SOLO si falta (para que la pestaña Assistant no rompa)
mkdir -p llm
[ -f llm/assistant.py ] || cat > llm/assistant.py <<'PY'
def refine_reply_with_llm(base_reply, prob, threshold, row, temperature=0.6, model="stub"):
    return base_reply, "stub"
PY

















cd /home/cloud-user/real-time-scoring
mkdir -p llm score

# viya_mas_client.py (ignora proxies y hace preflight corto)
cat > viya_mas_client.py <<'PY'
import os, requests

def _session_no_proxy():
    s = requests.Session()
    s.trust_env = False  # ignora http_proxy/https_proxy
    return s

def score_row_via_rest(row: dict) -> dict:
    base = (os.getenv("VIYA_URL") or "").rstrip("/")
    module = os.getenv("MAS_MODULE_ID")
    tok = os.getenv("BEARER_TOKEN") or os.getenv("SAS_SERVICES_TOKEN")
    if not (base and module and tok):
        raise RuntimeError("Faltan VIYA_URL, MAS_MODULE_ID o BEARER_TOKEN/SAS_SERVICES_TOKEN.")
    url = f"{base}/microanalyticScore/modules/{module}/steps/score"
    payload = {"inputs":[{"name":k,"value":v} for k,v in (row or {}).items()]}
    headers = {"Authorization": f"Bearer {tok}", "Content-Type":"application/json"}
    verify = os.getenv("VIYA_CA_BUNDLE") or True
    # preflight breve (opcional)
    try:
        _session_no_proxy().get(f"{base}/SASLogon/login", timeout=5, verify=verify)
    except requests.RequestException as e:
        pass  # no bloquea
    r = _session_no_proxy().post(url, json=payload, headers=headers,
                                 timeout=float(os.getenv("VIYA_TIMEOUT","30")),
                                 verify=verify)
    r.raise_for_status()
    return r.json()
PY

# stub del asistente (si app.py lo importa)
cat > llm/assistant.py <<'PY'
def refine_reply_with_llm(base_reply, prob, threshold, row, temperature=0.6, model="stub"):
    return base_reply, "stub"
PY



cd /home/cloud-user
ls -ld real-time-scoring*
# si no existe real-time-scoring actual:
mv real-time-scoring.bak.20251001-181056 real-time-scoring
ls -ld real-time-scoring


# 0) Ir al HOME y respaldar si ya existe la carpeta
cd /home/cloud-user
[ -d real-time-scoring ] && mv real-time-scoring real-time-scoring.bak.$(date +%Y%m%d-%H%M%S)

# 1) Clonar el repo en /home/cloud-user/real-time-scoring
git clone https://github.com/fauseric/sas.git real-time-scoring
cd /home/cloud-user/real-time-scoring
git remote -v   # verificación: debe decir fauseric/sas

# 2) Crear/activar venv y deps mínimas
python3 -m venv ~/.venvs/casapp
source ~/.venvs/casapp/bin/activate
pip install --upgrade pip
pip install "streamlit==1.36.0" "pandas==2.1.4" "requests==2.31.0"
# (opcional CAS): pip install "swat==1.6.1"

# 3) Cliente MAS (solo si NO existe en el repo)
[ -f viya_mas_client.py ] || cat > viya_mas_client.py <<'PY'
import os, requests
from typing import Dict, Any
def score_row_via_rest(row: Dict[str, Any]) -> Dict[str, Any]:
    base = (os.getenv("VIYA_URL") or "").rstrip("/")
    module = os.getenv("MAS_MODULE_ID")
    tok = os.getenv("BEARER_TOKEN") or os.getenv("SAS_SERVICES_TOKEN")
    if not (base and module and tok):
        raise RuntimeError("Faltan VIYA_URL, MAS_MODULE_ID o BEARER_TOKEN/SAS_SERVICES_TOKEN.")
    url = f"{base}/microanalyticScore/modules/{module}/steps/score"
    headers = {"Authorization": f"Bearer {tok}", "Content-Type": "application/json"}
    payload = {"inputs":[{"name":k,"value":v} for k,v in (row or {}).items()]}
    r = requests.post(url, json=payload, headers=headers,
                      timeout=float(os.getenv("VIYA_TIMEOUT","30")),
                      verify=os.getenv("VIYA_CA_BUNDLE") or True)
    r.raise_for_status()
    return r.json()
PY

# 4) (Opcional) Stub si falta llm/assistant.py
mkdir -p llm
[ -f llm/assistant.py ] || cat > llm/assistant.py <<'PY'
def refine_reply_with_llm(base_reply, prob, threshold, row, temperature=0.6, model="stub"):
    return base_reply, "stub"
PY

# 5) Token (usa el que YA tenés guardado; si no, creá el archivo una vez)
mkdir -p ~/.viya
# si aún no lo guardaste:
# printf '%s' '<TU_ACCESS_TOKEN>' > ~/.viya/token.txt
chmod 600 ~/.viya/token.txt

# 6) Lanzar la app con TODAS las vars en línea (evita proxy/entorno)
BEARER_TOKEN="$(cat ~/.viya/token.txt)" \
VIYA_URL="https://disco-a20237-rg.gelenable.sas.com" \
MAS_MODULE_ID="gradient_boosting__interactive-m" \
NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1" \
HTTPS_PROXY= HTTP_PROXY= https_proxy= http_proxy= \
python -m streamlit run app.py --server.address 0.0.0.0 --server.port 8501
