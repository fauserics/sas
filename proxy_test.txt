# en la VM (ejemplo con password grant; usa tu flujo real)
TOKEN=$(curl -s -u sas.ec: \
  -d "grant_type=password&username=$VIYA_USER&password=$VIYA_PASSWORD" \
  "$VIYA_URL/SASLogon/oauth/token" | python3 -c 'import sys,json;print(json.load(sys.stdin)["access_token"])')
echo "$TOKEN"




# 1) Entrá a la carpeta del proyecto
cd /home/cloud-user/real-time-scoring

# 2) Activá tu venv (o créalo si no existe)
source ~/.venvs/casapp/bin/activate || (python3 -m venv ~/.venvs/casapp && source ~/.venvs/casapp/bin/activate)

# 3) Dependencias mínimas (MAS)
pip install --upgrade pip
pip install "streamlit==1.36.0" "pandas==2.1.4" "requests==2.31.0"
# (solo si vas a usar el tab CAS): pip install "swat==1.6.1"



cat > payload.json <<'JSON'
{
  "inputs": [
    {"name":"REASON",   "value":"DebtCon"},
    {"name":"_REASON_", "value":"DebtCon"},
    {"name":"JOB",      "value":"Other"},
    {"name":"_JOB_",    "value":"Other"},

    {"name":"LOAN",     "value":11000},
    {"name":"MORTDUE",  "value":65000},
    {"name":"VALUE",    "value":90000},
    {"name":"YOJ",      "value":5},
    {"name":"DEROG",    "value":0},
    {"name":"DELINQ",   "value":0},
    {"name":"CLAGE",    "value":180},
    {"name":"NINQ",     "value":1},
    {"name":"CLNO",     "value":20},
    {"name":"DEBTINC",  "value":33.5}
  ]
}
JSON

curl -s -m 15 -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
  -d @payload.json \
  "$VIYA_URL/microanalyticScore/modules/$MAS_MODULE_ID/steps/score" | python3 -m json.tool






curl -s -H "Authorization: Bearer $TOKEN" \
  "$VIYA_URL/microanalyticScore/modules/$MAS_MODULE_ID" \
| python3 - <<'PY' > payload.json
import sys, json, re
m=json.load(sys.stdin)
ins = ((m.get("signature") or {}).get("inputs") or [])

def defval(name, typ):
    n=name.lower()
    if 'reason' in n: return "DebtCon"
    if 'job' in n:    return "Other"
    if (typ or '').lower() in ('double','int','integer','decimal','float','number'):
        return 0
    return ""  # texto genérico

payload = {"inputs":[{"name":i["name"], "value": defval(i["name"], i.get("type",""))} for i in ins]}
# si hay REASON pero no _REASON_, agregalo, y viceversa
names=[i["name"] for i in payload["inputs"]]
if "REASON" in names and "_REASON_" not in names:
    payload["inputs"].append({"name":"_REASON_","value":"DebtCon"})
if "_REASON_" in names and "REASON" not in names:
    payload["inputs"].append({"name":"REASON","value":"DebtCon"})
print(json.dumps(payload))
PY

# 2) probar el score
curl -s -m 15 -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
  -d @payload.json \
  "$VIYA_URL/microanalyticScore/modules/$MAS_MODULE_ID/steps/score" | python3 -m json.tool





curl -s -m 10 -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" \
  -d '{"inputs":[
        {"name":"REASON","value":"DebtCon"},
        {"name":"_REASON_","value":"DebtCon"},
        {"name":"LOAN","value":10000}
      ]}' \
  "$VIYA_URL/microanalyticScore/modules/$MAS_MODULE_ID/steps/score" | python3 -m json.tool




curl -s -H "Authorization: Bearer $TOKEN" \
  "$VIYA_URL/microanalyticScore/modules/$MAS_MODULE_ID" | python3 -m json.tool | head -n 50


export VIYA_URL="https://disco-a20237-rg.gelenable.sas.com"
export MAS_MODULE_ID="gradient_boosting__interactive-m"   
# Si usan CA privada:
# export VIYA_CA_BUNDLE="/ruta/corporate-ca.pem"
export NO_PROXY="disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com"



#Validacion acceso a MAS
export VIYA_URL="https://disco-a20237-rg.gelenable.sas.com"
export CAS_HOST="$(printf '%s' "$VIYA_URL" | sed -E 's#^https?://##; s#/.*$##')"
export NO_PROXY="$CAS_HOST,.$(echo "$CAS_HOST" | cut -d. -f2-)"

export VIYA_USER="<tu_usuario>"
export VIYA_PASSWORD="<tu_password>"

TOKEN=$(curl -s -m 10 -u sas.ec: \
  -d "grant_type=password&username=$VIYA_USER&password=$VIYA_PASSWORD" \
  "$VIYA_URL/SASLogon/oauth/token" | python3 -c 'import sys,json; print(json.load(sys.stdin)["access_token"])')

curl -s -m 10 -H "Authorization: Bearer $TOKEN" \
  "https://$CAS_HOST/microanalyticScore/modules?limit=1" \
  -w "\nHTTP %{http_code}\n"









curl -s -m 5 -H "Authorization: Bearer $SAS_SERVICES_TOKEN" \
  "https://$CAS_HOST/microanalyticScore/modules?limit=1" \
  -w "\nHTTP %{http_code}\n"


export CAS_HOST="$(printf '%s' "${VIYA_URL:-disco-a20237-rg.gelenable.sas.com}" | sed -E 's#^https?://##; s#/.*$##')"
echo "CAS_HOST=$CAS_HOST"

# 2) Vamos por CAS REST via Ingress (HTTPS 443)
export CAS_PROTOCOL="https"
export CAS_PORT="443"
export NO_PROXY="$CAS_HOST,.$(echo "$CAS_HOST" | cut -d. -f2-)"
# si usan CA corporativa, descomentar y poner la ruta:
# export CAS_SSL_CA_LIST="/ruta/corporate-ca.pem"

# 3) Checks rápidos (3s cada uno)
getent hosts "$CAS_HOST" || echo "DNS FAIL"
nc -vz -w 3 "$CAS_HOST" 443 || echo "TCP 443 FAIL"
curl -sS -m 5 \
  -H "Authorization: Bearer $SAS_SERVICES_TOKEN" \
  -H "Content-Type: application/json" \
  ${CAS_SSL_CA_LIST:+ --cacert "$CAS_SSL_CA_LIST"} \
  -X POST "https://$CAS_HOST/cas/sessions" -d '{}' | head -c 200 || echo "REST FAIL"


getent hosts "$CAS_HOST" || echo "DNS FAIL"

nc -vz -w 3 "$CAS_HOST" 443 || echo "TCP FAIL 443"

curl -sS -m 5 \
  -H "Authorization: Bearer $SAS_SERVICES_TOKEN" \
  -H "Content-Type: application/json" \
  ${CAS_SSL_CA_LIST:+ --cacert "$CAS_SSL_CA_LIST"} \
  -X POST "https://$CAS_HOST/cas/sessions" -d '{}' | head -c 200 || echo "REST FAIL"


# DNS
getent hosts "$CAS_HOST" || echo "DNS FAIL"

# Si vas por Ingress (recomendado): 443
nc -vz -w 3 "$CAS_HOST" 443 || echo "TCP 443 FAIL"



# en la VM# A) DNS (3s)
# Ver VIYA_URL y extraer el host
echo "$VIYA_URL"
export CAS_HOST="$(printf '%s' "$VIYA_URL" | sed -E 's#^https?://##; s#/.*$##')"
echo "CAS_HOST=$CAS_HOST"


nslookup -timeout=3 "$CAS_HOST" || getent hosts "$CAS_HOST" || echo "DNS FAIL"

PORT="${CAS_PORT:-443}"
nc -vz -w 3 "$CAS_HOST" "$PORT" || echo "TCP FAIL"

if [ "${CAS_PROTOCOL}" = "https" ] || [ "${CAS_PROTOCOL}" = "http" ]; then
  curl -sS -m 3 -k \
    -H "Authorization: Bearer $SAS_SERVICES_TOKEN" \
    -H "Content-Type: application/json" \
    -X POST "https://$CAS_HOST/cas/sessions" -d '{}' | head -c 200 || echo "REST FAIL"
fi





# 1) Tomá el host del VIYA_URL
echo "$VIYA_URL"
export CAS_HOST="$(printf '%s' "$VIYA_URL" | sed -E 's#^https?://##; s#/.*$##')"

# 2) Vars para SWAT REST
export CAS_PROTOCOL="https"
export CAS_PORT="443"
export SAS_SERVICES_TOKEN="***"      # rota el token que pegaste antes
# si usan CA corporativa:
# export CAS_SSL_CA_LIST="/ruta/ca_corporativa.pem"
export NO_PROXY="$CAS_HOST,.$(echo "$CAS_HOST" | cut -d. -f2-)"




export NO_PROXY="$CAS_HOST,.gelenable.sas.com"

python - <<'PY'
import os, swat
c = swat.CAS(os.environ["CAS_HOST"], int(os.getenv("CAS_PORT")),
             protocol=os.getenv("CAS_PROTOCOL"),
             token=os.getenv("SAS_SERVICES_TOKEN"),
             username=os.getenv("CAS_USER"), password=os.getenv("CAS_PASSWORD"),
             ssl_ca_list=os.getenv("CAS_SSL_CA_LIST"))
print("Server OK:", c.serverstatus().get('server',{}).get('version'))
c.loadactionset("astore")
print("RStores en caslib Public:")
print(c.astore.listRStore(caslib=os.getenv("CAS_ASTORE_CASLIB","Public")))
c.terminate()
PY




python3 -m venv ~/.venvs/casapp
source ~/.venvs/casapp/bin/activate
pip install --upgrade pip
pip install "swat==1.6.1" "pandas==2.1.4" "requests==2.31.0" "streamlit==1.36.0"
python -c "import swat,sys; print('SWAT OK', swat.__version__, 'en', sys.executable)"



#VIYA REST
nslookup $VIYA_URL
nc -vz disco-a20237-rg.gelenable.sas.com 443

NO_PROXY="disco-a20237-rg.gelenable.sas.com,.sas.com" \
  curl -vk https://disco-a20237-rg.gelenable.sas.com/SASLogon/login --max-time 10


#VIYA SWAT
python3 - <<'PY'
import os, swat, pandas as pd
c = swat.CAS(os.environ["CAS_HOST"], int(os.getenv("CAS_PORT","8777")),
             protocol=os.getenv("CAS_PROTOCOL","http"),
             token=os.getenv("SAS_SERVICES_TOKEN") or os.getenv("BEARER_TOKEN"),
             username=os.getenv("CAS_USER"), password=os.getenv("CAS_PASSWORD"),
             ssl_ca_list=os.getenv("CAS_SSL_CA_LIST") or os.getenv("VIYA_CA_BUNDLE"))
print("Server OK:", c.serverstatus().get('server',{}).get('version'))
c.loadactionset("astore")
# fila mínima
df = pd.DataFrame([{"_REASON_":"DebtCon","REASON":"DebtCon","LOAN":0.0}])
wlib = os.getenv("CAS_WORK_CASLIB","Public")
c.upload_frame(df, casout={"name":"_inp_smoke","caslib":wlib,"replace":True})
c.astore.score(
    rstore={"name": os.environ["CAS_ASTORE_NAME"], "caslib": os.getenv("CAS_ASTORE_CASLIB","Public")},
    table={"name":"_inp_smoke","caslib": wlib},
    casout={"name":"_out_smoke","caslib": wlib,"replace": True},
    copyvars="ALL"
)
out = c.CASTable("_out_smoke", caslib=wlib).to_frame()
c.terminate()
print("Cols:", list(out.columns)[:12])
print("Fila:", out.head(1).to_dict(orient="records")[0])
PY




python3 -m streamlit run app.py --server.address 0.0.0.0 --server.port 8501 --server.headless true

curl -sf http://127.0.0.1:8501/healthz && echo "OK"

hostname -I | awk '{print $1}'





python3 -m streamlit run app.py --server.address 0.0.0.0 --server.port 8501 --server.headless true


ss -ltnp | grep 8501 || lsof -i :8501


# 1) Capturo el Python que usa "python3"
PY=$(python3 -c 'import sys; print(sys.executable)'); echo "Usando Python: $PY"

# 2) ¿SWAT está instalado en ESE Python?
"$PY" -c "import swat,sys; print('SWAT OK', swat.__version__, 'en', sys.executable)" \
  || "$PY" -m pip install "swat==1.6.1"

# 3) Si falta Streamlit en ese mismo Python, lo instalo (no hace daño si ya está)
"$PY" -m pip install "streamlit==1.36.0" "pandas==2.1.4" "requests==2.31.0" -q

# 4) Lanzo la app con ese mismo Python (clave)
"$PY" -m streamlit run app.py --server.address 127.0.0.1 --server.port 8501


python3 -c "import streamlit,sys; print('streamlit en:', streamlit.__file__); print('python:', sys.executable)"


python3 - <<'PY'
import os, sys
try:
    import swat
    print("OK: SWAT", swat.__version__)
except Exception as e:
    print("ERROR: SWAT no importa:", e); sys.exit(1)

print("CAS_HOST =", os.getenv("CAS_HOST"))
print("CAS_PORT =", os.getenv("CAS_PORT"))
print("CAS_PROTOCOL =", os.getenv("CAS_PROTOCOL"))
print("CAS_ASTORE_NAME =", os.getenv("CAS_ASTORE_NAME"))
print("CAS_ASTORE_CASLIB =", os.getenv("CAS_ASTORE_CASLIB"))
print("CAS_WORK_CASLIB =", os.getenv("CAS_WORK_CASLIB"))
print("Auth (token) =", "YES" if os.getenv("SAS_SERVICES_TOKEN") or os.getenv("BEARER_TOKEN") else "NO")
print("Auth (user/pass) =", "YES" if os.getenv("CAS_USER") and os.getenv("CAS_PASSWORD") else "NO")
PY

export CAS_HOST="sas-cas-server-default-client"
export CAS_PORT="5570"          
export CAS_PROTOCOL="http"        
export CAS_ASTORE_NAME="dmcas_epscorecode.sas"
export CAS_ASTORE_CASLIB="Public"
export CAS_WORK_CASLIB="Public"
export SAS_SERVICES_TOKEN="eyJqa3UiOiJodHRwczovL2Rpc2NvLWEyMDIzNy1yZy5nZWxlbmFibGUuc2FzLmNvbS9TQVNMb2dvbi90b2tlbl9rZXlzIiwia2lkIjoibGVnYWN5LXRva2VuLWtleSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJlOWViNTgxOS03NTNiLTQ1MGEtODBhMS03YmJkNzY2OWQ3MTYiLCJ1c2VyX25hbWUiOiJnZWxkbXVpQGdlbGVuYWJsZS5zYXMuY29tIiwib3JpZ2luIjoibGRhcCIsImlzcyI6Imh0dHBzOi8vZGlzY28tYTIwMjM3LXJnLmdlbGVuYWJsZS5zYXMuY29tL1NBU0xvZ29uL29hdXRoL3Rva2VuIiwiYXV0aG9yaXRpZXMiOlsiU0FTQWRtaW5pc3RyYXRvcnMiLCJHRUwgVGVzdCBVc2VycyIsIkNBU0hvc3RBY2NvdW50UmVxdWlyZWQiXSwiY2xpZW50X2lkIjoic2FzLmxhdW5jaGVyIiwiYXVkIjpbInNhcy5sYXVuY2hlciIsInVhYSJdLCJleHRfaWQiOiJjbj1HRUwgRGF0YSBNYW5hZ2VtZW50IFVJIFVzZXIsb3U9QUFEREMgVXNlcnMsZGM9Z2VsZW5hYmxlLGRjPXNhcyxkYz1jb20iLCJ6aWQiOiJ1YWEiLCJncmFudF90eXBlIjoidXJuOmlldGY6cGFyYW1zOm9hdXRoOmdyYW50LXR5cGU6and0LWJlYXJlciIsInVzZXJfaWQiOiJlOWViNTgxOS03NTNiLTQ1MGEtODBhMS03YmJkNzY2OWQ3MTYiLCJhenAiOiJzYXMubGF1bmNoZXIiLCJzY29wZSI6WyJ1YWEudXNlciIsIlNBU0FkbWluaXN0cmF0b3JzIl0sImV4cCI6MTc1OTI5NTQ2MCwiaWF0IjoxNzU5MjkxODYwLCJqdGkiOiI1NDQ1YWVjYzExYzI0YmYwODZjYjhmYTIyNDhlMTY3YyIsImVtYWlsIjoiZ2VsZG11aUBnZWxlbmFibGUuc2FzLmNvbSIsInJldl9zaWciOiIxYTUxNDIzZSIsImNpZCI6InNhcy5sYXVuY2hlciJ9.14crc-hcpGLO0rynVwrbERCoBP4PGOgCJf_3QaG7IC7fSYN1DErH8hZOBUrsiVNrU5cGd9LIwcP_9__qUxzYlpstOxgzY2RrJwBSzBtnQg3FUxEds6CZzMQjwC8wX8vnlAVIUjAJwBazVhKIwNXmJ1XwtJJeHafl5nNmPPEWRpjvrQMJaUJwiGMLlct72t1NwA1PKDzWUbW0kHAG8JRIiFkcZgcDdoN-cU8dhyCFEk70LCX-b5YF_TJF7qd66IGzs1j_NxuABqlsVbvZWsz7HGoksLmSO69FRqsiN9XYSTlA8CHwnVEs-Y7jazn1j6THTddzM9pqcEBODuN-FcBNNQ"

# VIYA REST



ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 \
    -R 80:localhost:8501 nokey@localhost.run

./cloudflared tunnel \
  --url http://127.0.0.1:8501 \
  --protocol http2 \
  --edge-ip-version 4 \
  --no-autoupdate \
  --loglevel info


# 1) Descargar binario (x86_64); no requiere root
curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
chmod +x cloudflared

# 2) Ejecutar el túnel hacia tu Streamlit local
./cloudflared tunnel --url http://localhost:8501 --no-autoupdate


mkdir -p ~/real-time-scoring && cd ~/real-time-scoring
nano app.py


streamlit>=1.31,<2
pandas>=2.0,<3
requests>=2.31,<3
openai>=1.0,<2

python -m venv .venv
source .venv/bin/activate
python -m pip install --upgrade pip
pip install streamlit pandas requests
# si vas a usar el asistente LLM:
pip install openai
# si querés cargar .env:
# pip install python-dotenv


export OPENAI_API_KEY =" "

export LLM_MODEL="gpt-4o-mini"

export VIYA_URL = "https://disco-a20237-rg.gelenable.sas.com"
export MAS_MODULE_ID = "gradient_boosting__interactive-m"
export VIYA_USER = "geldmui@gelenable.sas.com"
export BEARER_TOKEN = """eyJqa3UiOiJodHRwczovL2Rpc2NvLWEyMDIzNy1yZy5nZWxlbmFibGUuc2FzLmNvbS9TQVNMb2dvbi90b2tlbl9rZXlzIiwia2lkIjoibGVnYWN5LXRva2VuLWtleSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJlOWViNTgxOS03NTNiLTQ1MGEtODBhMS03YmJkNzY2OWQ3MTYiLCJ1c2VyX25hbWUiOiJnZWxkbXVpQGdlbGVuYWJsZS5zYXMuY29tIiwib3JpZ2luIjoibGRhcCIsImlzcyI6Imh0dHBzOi8vZGlzY28tYTIwMjM3LXJnLmdlbGVuYWJsZS5zYXMuY29tL1NBU0xvZ29uL29hdXRoL3Rva2VuIiwiYXV0aG9yaXRpZXMiOlsiU0FTQWRtaW5pc3RyYXRvcnMiLCJHRUwgVGVzdCBVc2VycyIsIkNBU0hvc3RBY2NvdW50UmVxdWlyZWQiXSwiY2xpZW50X2lkIjoic2FzLmxhdW5jaGVyIiwiYXVkIjpbInNhcy5sYXVuY2hlciIsInVhYSJdLCJleHRfaWQiOiJjbj1HRUwgRGF0YSBNYW5hZ2VtZW50IFVJIFVzZXIsb3U9QUFEREMgVXNlcnMsZGM9Z2VsZW5hYmxlLGRjPXNhcyxkYz1jb20iLCJ6aWQiOiJ1YWEiLCJncmFudF90eXBlIjoidXJuOmlldGY6cGFyYW1zOm9hdXRoOmdyYW50LXR5cGU6and0LWJlYXJlciIsInVzZXJfaWQiOiJlOWViNTgxOS03NTNiLTQ1MGEtODBhMS03YmJkNzY2OWQ3MTYiLCJhenAiOiJzYXMubGF1bmNoZXIiLCJzY29wZSI6WyJ1YWEudXNlciIsIlNBU0FkbWluaXN0cmF0b3JzIl0sImV4cCI6MTc1OTI5NTQ2MCwiaWF0IjoxNzU5MjkxODYwLCJqdGkiOiI1NDQ1YWVjYzExYzI0YmYwODZjYjhmYTIyNDhlMTY3YyIsImVtYWlsIjoiZ2VsZG11aUBnZWxlbmFibGUuc2FzLmNvbSIsInJldl9zaWciOiIxYTUxNDIzZSIsImNpZCI6InNhcy5sYXVuY2hlciJ9.14crc-hcpGLO0rynVwrbERCoBP4PGOgCJf_3QaG7IC7fSYN1DErH8hZOBUrsiVNrU5cGd9LIwcP_9__qUxzYlpstOxgzY2RrJwBSzBtnQg3FUxEds6CZzMQjwC8wX8vnlAVIUjAJwBazVhKIwNXmJ1XwtJJeHafl5nNmPPEWRpjvrQMJaUJwiGMLlct72t1NwA1PKDzWUbW0kHAG8JRIiFkcZgcDdoN-cU8dhyCFEk70LCX-b5YF_TJF7qd66IGzs1j_NxuABqlsVbvZWsz7HGoksLmSO69FRqsiN9XYSTlA8CHwnVEs-Y7jazn1j6THTddzM9pqcEBODuN-FcBNNQ
"""
export VIYA_TLS_VERIFY = "1"

# Bypass el proxy para este host/dominio
NO_PROXY = "disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1"

# (Opcional) fuerza no usar proxy en el cliente Viya
export VIYA_FORCE_NO_PROXY = "1"

# (Opcional) subí timeouts por si la red es lenta
export VIYA_TIMEOUT_CONNECT = "60"
export VIYA_TIMEOUT_READ = "120"



nslookup disco-a20237-rg.gelenable.sas.com
curl -v https://disco-a20237-rg.gelenable.sas.com/SASLogon/login --max-time 10


# ¿Llega a abrir TLS al host?
curl -vkI --connect-timeout 10 https://disco-a20237-rg.gelenable.sas.com

# ¿Responde el gateway de Viya?
curl -vk --connect-timeout 10 "https://disco-a20237-rg.gelenable.sas.com/SASLogon/oauth/health"


https://2azvvgp9rxjiqcyjrxltwy.streamlit.app/

curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" \
  "$VIYA_URL/microanalyticScore/modules/gradient_boosting__interactive-m" \
| jq '{id,name,version,inputs,outputs}'


NAME="Gradient"   
curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" \
  "$VIYA_URL/microanalyticScore/modules?limit=200" \
| jq -r --arg q "$NAME" '(.items // .)[] 
  | select(.name|test($q;"i")) 
  | [.name, .id, (.version|tostring)] | @tsv'


VIYA_URL="https://tu-viya"
TOKEN="eyJhbGciOi... (todo en una línea)"
curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" \
  "$VIYA_URL/microanalyticScore/modules?limit=200" | sed -n '1,200p'


filename tok "%sysfunc(getoption(WORK))/services_token.txt";
data _null_;
  file tok lrecl=32767;
  put "%sysget(SAS_SERVICES_TOKEN)";
run;



%put NOTE: SAS_SERVICES_TOKEN=%sysget(SAS_SERVICES_TOKEN);
%put NOTE: SAS_ACCESS_TOKEN=%sysget(SAS_ACCESS_TOKEN);

#CLI
curl -s -H "Authorization: Bearer EY_TU_TOKEN" \
  "https://tu-viya/microanalyticScore/modules?limit=1"


curl -s -X POST \
  -u "viya_client:" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "grant_type=password&username=MI_USUARIO&password=MI_PASSWORD&scope=openid" \
  "https://TU-VIYA/SASLogon/oauth/token"


# Reemplazá <ns> por tu namespace y <PAT> por el token (sin < >)
kubectl exec -n <ns> -it sas-model-publish-6f8dbdd879-zthcq -- sh -lc '
  echo "== Probar reachability ==";
  curl -sI https://github.com | head -n 3 || true;

  echo "== Probar Git endpoint con auth básica (debería dar 200) ==";
  PAT="<PAT>"; USER="fauserics";
  curl -s -o /dev/null -w "HTTP %{http_code}\n" \
    -u "$USER:$PAT" \
    "https://github.com/fauserics/sas.git/info/refs?service=git-upload-pack";


kubectl run curlbox -n <tu-namespace> -it --rm --restart=Never \
  --image=curlimages/curl -- sh

# ¿Resuelve DNS?
nslookup github.com || getent hosts github.com

# ¿Responde el sitio?
curl -I --connect-timeout 5 --max-time 10 https://github.com

# ¿Abre el puerto 443?
curl -sS --connect-timeout 5 --max-time 10 https://github.com > /dev/null && echo OK || echo FAIL

# Prueba del endpoint que usa git (con auth básica)
USER=fauserics
PAT='tu_token_aqui'
curl -sS -u "$USER:$PAT" --connect-timeout 5 --max-time 15 \
  "https://github.com/fauserics/sas.git/info/refs?service=git-upload-pack" | head


kubectl run curlbox -n <ns> --rm -it --restart=Never --image=curlimages/curl -- sh
# ya dentro del pod:
USER=fauserics
PAT='ghp_xxx'

# GitHub API requiere User-Agent: ponelo
curl -I -H 'User-Agent: curl' --connect-timeout 5 --max-time 10 https://api.github.com

# Ahora con auth: debería devolver JSON con "login": "fauserics"
curl -sS -u "$USER:$PAT" -H 'User-Agent: curl' \
     --connect-timeout 5 --max-time 15 \
     https://api.github.com/user | sed -n '1,30p'
exit

kubectl run gitbox -n <ns> --rm -it --restart=Never --image=alpine/git -- sh
USER=fauserics
PAT='ghp_xxx'

# Forzamos verbosidad y límite de velocidad para que NO cuelgue eternamente
GIT_CURL_VERBOSE=1 git -c http.lowSpeedLimit=1 -c http.lowSpeedTime=5 \
  ls-remote https://$USER:$PAT@github.com/fauserics/sas.git | head
exit

# dentro de un pod de prueba (curlbox)
curl -sS -u "fauserics:$PAT" -H 'User-Agent: curl' \
  https://api.github.com/repos/fauserics/sas/contents/ | head

/*prubea final*/
# abre una shell en un pod de prueba con git
kubectl run gitbox -n <tu-ns> --rm -it --restart=Never --image=alpine/git -- sh

USER=fauserics
PAT='PEGA_AQUI_TU_PAT'

# Verboso + timeouts (para que no “cuelgue”)
GIT_CURL_VERBOSE=1 git -c http.lowSpeedLimit=1 -c http.lowSpeedTime=5 \
  ls-remote https://$USER:$PAT@github.com/fauserics/sas.git | head
exit


'


'
