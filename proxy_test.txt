#VIYA SWAT

python3 -c "import streamlit,sys; print('streamlit en:', streamlit.__file__); print('python:', sys.executable)"


python3 - <<'PY'
import os, sys
try:
    import swat
    print("OK: SWAT", swat.__version__)
except Exception as e:
    print("ERROR: SWAT no importa:", e); sys.exit(1)

print("CAS_HOST =", os.getenv("CAS_HOST"))
print("CAS_PORT =", os.getenv("CAS_PORT"))
print("CAS_PROTOCOL =", os.getenv("CAS_PROTOCOL"))
print("CAS_ASTORE_NAME =", os.getenv("CAS_ASTORE_NAME"))
print("CAS_ASTORE_CASLIB =", os.getenv("CAS_ASTORE_CASLIB"))
print("CAS_WORK_CASLIB =", os.getenv("CAS_WORK_CASLIB"))
print("Auth (token) =", "YES" if os.getenv("SAS_SERVICES_TOKEN") or os.getenv("BEARER_TOKEN") else "NO")
print("Auth (user/pass) =", "YES" if os.getenv("CAS_USER") and os.getenv("CAS_PASSWORD") else "NO")
PY

export CAS_HOST="sas-cas-server-default-client"
export CAS_PORT="5570"          
export CAS_PROTOCOL="http"        
export CAS_ASTORE_NAME="dmcas_epscorecode.sas"
export CAS_ASTORE_CASLIB="Public"
export CAS_WORK_CASLIB="Public"
export SAS_SERVICES_TOKEN="eyJqa3UiOiJodHRwczovL2Rpc2NvLWEyMDIzNy1yZy5nZWxlbmFibGUuc2FzLmNvbS9TQVNMb2dvbi90b2tlbl9rZXlzIiwia2lkIjoibGVnYWN5LXRva2VuLWtleSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJlOWViNTgxOS03NTNiLTQ1MGEtODBhMS03YmJkNzY2OWQ3MTYiLCJ1c2VyX25hbWUiOiJnZWxkbXVpQGdlbGVuYWJsZS5zYXMuY29tIiwib3JpZ2luIjoibGRhcCIsImlzcyI6Imh0dHBzOi8vZGlzY28tYTIwMjM3LXJnLmdlbGVuYWJsZS5zYXMuY29tL1NBU0xvZ29uL29hdXRoL3Rva2VuIiwiYXV0aG9yaXRpZXMiOlsiU0FTQWRtaW5pc3RyYXRvcnMiLCJHRUwgVGVzdCBVc2VycyIsIkNBU0hvc3RBY2NvdW50UmVxdWlyZWQiXSwiY2xpZW50X2lkIjoic2FzLmxhdW5jaGVyIiwiYXVkIjpbInNhcy5sYXVuY2hlciIsInVhYSJdLCJleHRfaWQiOiJjbj1HRUwgRGF0YSBNYW5hZ2VtZW50IFVJIFVzZXIsb3U9QUFEREMgVXNlcnMsZGM9Z2VsZW5hYmxlLGRjPXNhcyxkYz1jb20iLCJ6aWQiOiJ1YWEiLCJncmFudF90eXBlIjoidXJuOmlldGY6cGFyYW1zOm9hdXRoOmdyYW50LXR5cGU6and0LWJlYXJlciIsInVzZXJfaWQiOiJlOWViNTgxOS03NTNiLTQ1MGEtODBhMS03YmJkNzY2OWQ3MTYiLCJhenAiOiJzYXMubGF1bmNoZXIiLCJzY29wZSI6WyJ1YWEudXNlciIsIlNBU0FkbWluaXN0cmF0b3JzIl0sImV4cCI6MTc1OTI5NTQ2MCwiaWF0IjoxNzU5MjkxODYwLCJqdGkiOiI1NDQ1YWVjYzExYzI0YmYwODZjYjhmYTIyNDhlMTY3YyIsImVtYWlsIjoiZ2VsZG11aUBnZWxlbmFibGUuc2FzLmNvbSIsInJldl9zaWciOiIxYTUxNDIzZSIsImNpZCI6InNhcy5sYXVuY2hlciJ9.14crc-hcpGLO0rynVwrbERCoBP4PGOgCJf_3QaG7IC7fSYN1DErH8hZOBUrsiVNrU5cGd9LIwcP_9__qUxzYlpstOxgzY2RrJwBSzBtnQg3FUxEds6CZzMQjwC8wX8vnlAVIUjAJwBazVhKIwNXmJ1XwtJJeHafl5nNmPPEWRpjvrQMJaUJwiGMLlct72t1NwA1PKDzWUbW0kHAG8JRIiFkcZgcDdoN-cU8dhyCFEk70LCX-b5YF_TJF7qd66IGzs1j_NxuABqlsVbvZWsz7HGoksLmSO69FRqsiN9XYSTlA8CHwnVEs-Y7jazn1j6THTddzM9pqcEBODuN-FcBNNQ"

# VIYA REST



ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 \
    -R 80:localhost:8501 nokey@localhost.run

./cloudflared tunnel \
  --url http://127.0.0.1:8501 \
  --protocol http2 \
  --edge-ip-version 4 \
  --no-autoupdate \
  --loglevel info


# 1) Descargar binario (x86_64); no requiere root
curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
chmod +x cloudflared

# 2) Ejecutar el túnel hacia tu Streamlit local
./cloudflared tunnel --url http://localhost:8501 --no-autoupdate


mkdir -p ~/real-time-scoring && cd ~/real-time-scoring
nano app.py


streamlit>=1.31,<2
pandas>=2.0,<3
requests>=2.31,<3
openai>=1.0,<2

python -m venv .venv
source .venv/bin/activate
python -m pip install --upgrade pip
pip install streamlit pandas requests
# si vas a usar el asistente LLM:
pip install openai
# si querés cargar .env:
# pip install python-dotenv


export OPENAI_API_KEY =" "

export LLM_MODEL="gpt-4o-mini"

export VIYA_URL = "https://disco-a20237-rg.gelenable.sas.com"
export MAS_MODULE_ID = "gradient_boosting__interactive-m"
export VIYA_USER = "geldmui@gelenable.sas.com"
export BEARER_TOKEN = """eyJqa3UiOiJodHRwczovL2Rpc2NvLWEyMDIzNy1yZy5nZWxlbmFibGUuc2FzLmNvbS9TQVNMb2dvbi90b2tlbl9rZXlzIiwia2lkIjoibGVnYWN5LXRva2VuLWtleSIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiJlOWViNTgxOS03NTNiLTQ1MGEtODBhMS03YmJkNzY2OWQ3MTYiLCJ1c2VyX25hbWUiOiJnZWxkbXVpQGdlbGVuYWJsZS5zYXMuY29tIiwib3JpZ2luIjoibGRhcCIsImlzcyI6Imh0dHBzOi8vZGlzY28tYTIwMjM3LXJnLmdlbGVuYWJsZS5zYXMuY29tL1NBU0xvZ29uL29hdXRoL3Rva2VuIiwiYXV0aG9yaXRpZXMiOlsiU0FTQWRtaW5pc3RyYXRvcnMiLCJHRUwgVGVzdCBVc2VycyIsIkNBU0hvc3RBY2NvdW50UmVxdWlyZWQiXSwiY2xpZW50X2lkIjoic2FzLmxhdW5jaGVyIiwiYXVkIjpbInNhcy5sYXVuY2hlciIsInVhYSJdLCJleHRfaWQiOiJjbj1HRUwgRGF0YSBNYW5hZ2VtZW50IFVJIFVzZXIsb3U9QUFEREMgVXNlcnMsZGM9Z2VsZW5hYmxlLGRjPXNhcyxkYz1jb20iLCJ6aWQiOiJ1YWEiLCJncmFudF90eXBlIjoidXJuOmlldGY6cGFyYW1zOm9hdXRoOmdyYW50LXR5cGU6and0LWJlYXJlciIsInVzZXJfaWQiOiJlOWViNTgxOS03NTNiLTQ1MGEtODBhMS03YmJkNzY2OWQ3MTYiLCJhenAiOiJzYXMubGF1bmNoZXIiLCJzY29wZSI6WyJ1YWEudXNlciIsIlNBU0FkbWluaXN0cmF0b3JzIl0sImV4cCI6MTc1OTI5NTQ2MCwiaWF0IjoxNzU5MjkxODYwLCJqdGkiOiI1NDQ1YWVjYzExYzI0YmYwODZjYjhmYTIyNDhlMTY3YyIsImVtYWlsIjoiZ2VsZG11aUBnZWxlbmFibGUuc2FzLmNvbSIsInJldl9zaWciOiIxYTUxNDIzZSIsImNpZCI6InNhcy5sYXVuY2hlciJ9.14crc-hcpGLO0rynVwrbERCoBP4PGOgCJf_3QaG7IC7fSYN1DErH8hZOBUrsiVNrU5cGd9LIwcP_9__qUxzYlpstOxgzY2RrJwBSzBtnQg3FUxEds6CZzMQjwC8wX8vnlAVIUjAJwBazVhKIwNXmJ1XwtJJeHafl5nNmPPEWRpjvrQMJaUJwiGMLlct72t1NwA1PKDzWUbW0kHAG8JRIiFkcZgcDdoN-cU8dhyCFEk70LCX-b5YF_TJF7qd66IGzs1j_NxuABqlsVbvZWsz7HGoksLmSO69FRqsiN9XYSTlA8CHwnVEs-Y7jazn1j6THTddzM9pqcEBODuN-FcBNNQ
"""
export VIYA_TLS_VERIFY = "1"

# Bypass el proxy para este host/dominio
NO_PROXY = "disco-a20237-rg.gelenable.sas.com,.gelenable.sas.com,localhost,127.0.0.1"

# (Opcional) fuerza no usar proxy en el cliente Viya
export VIYA_FORCE_NO_PROXY = "1"

# (Opcional) subí timeouts por si la red es lenta
export VIYA_TIMEOUT_CONNECT = "60"
export VIYA_TIMEOUT_READ = "120"



nslookup disco-a20237-rg.gelenable.sas.com
curl -v https://disco-a20237-rg.gelenable.sas.com/SASLogon/login --max-time 10


# ¿Llega a abrir TLS al host?
curl -vkI --connect-timeout 10 https://disco-a20237-rg.gelenable.sas.com

# ¿Responde el gateway de Viya?
curl -vk --connect-timeout 10 "https://disco-a20237-rg.gelenable.sas.com/SASLogon/oauth/health"


https://2azvvgp9rxjiqcyjrxltwy.streamlit.app/

curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" \
  "$VIYA_URL/microanalyticScore/modules/gradient_boosting__interactive-m" \
| jq '{id,name,version,inputs,outputs}'


NAME="Gradient"   
curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" \
  "$VIYA_URL/microanalyticScore/modules?limit=200" \
| jq -r --arg q "$NAME" '(.items // .)[] 
  | select(.name|test($q;"i")) 
  | [.name, .id, (.version|tostring)] | @tsv'


VIYA_URL="https://tu-viya"
TOKEN="eyJhbGciOi... (todo en una línea)"
curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/json" \
  "$VIYA_URL/microanalyticScore/modules?limit=200" | sed -n '1,200p'


filename tok "%sysfunc(getoption(WORK))/services_token.txt";
data _null_;
  file tok lrecl=32767;
  put "%sysget(SAS_SERVICES_TOKEN)";
run;



%put NOTE: SAS_SERVICES_TOKEN=%sysget(SAS_SERVICES_TOKEN);
%put NOTE: SAS_ACCESS_TOKEN=%sysget(SAS_ACCESS_TOKEN);

#CLI
curl -s -H "Authorization: Bearer EY_TU_TOKEN" \
  "https://tu-viya/microanalyticScore/modules?limit=1"


curl -s -X POST \
  -u "viya_client:" \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "grant_type=password&username=MI_USUARIO&password=MI_PASSWORD&scope=openid" \
  "https://TU-VIYA/SASLogon/oauth/token"


# Reemplazá <ns> por tu namespace y <PAT> por el token (sin < >)
kubectl exec -n <ns> -it sas-model-publish-6f8dbdd879-zthcq -- sh -lc '
  echo "== Probar reachability ==";
  curl -sI https://github.com | head -n 3 || true;

  echo "== Probar Git endpoint con auth básica (debería dar 200) ==";
  PAT="<PAT>"; USER="fauserics";
  curl -s -o /dev/null -w "HTTP %{http_code}\n" \
    -u "$USER:$PAT" \
    "https://github.com/fauserics/sas.git/info/refs?service=git-upload-pack";


kubectl run curlbox -n <tu-namespace> -it --rm --restart=Never \
  --image=curlimages/curl -- sh

# ¿Resuelve DNS?
nslookup github.com || getent hosts github.com

# ¿Responde el sitio?
curl -I --connect-timeout 5 --max-time 10 https://github.com

# ¿Abre el puerto 443?
curl -sS --connect-timeout 5 --max-time 10 https://github.com > /dev/null && echo OK || echo FAIL

# Prueba del endpoint que usa git (con auth básica)
USER=fauserics
PAT='tu_token_aqui'
curl -sS -u "$USER:$PAT" --connect-timeout 5 --max-time 15 \
  "https://github.com/fauserics/sas.git/info/refs?service=git-upload-pack" | head


kubectl run curlbox -n <ns> --rm -it --restart=Never --image=curlimages/curl -- sh
# ya dentro del pod:
USER=fauserics
PAT='ghp_xxx'

# GitHub API requiere User-Agent: ponelo
curl -I -H 'User-Agent: curl' --connect-timeout 5 --max-time 10 https://api.github.com

# Ahora con auth: debería devolver JSON con "login": "fauserics"
curl -sS -u "$USER:$PAT" -H 'User-Agent: curl' \
     --connect-timeout 5 --max-time 15 \
     https://api.github.com/user | sed -n '1,30p'
exit

kubectl run gitbox -n <ns> --rm -it --restart=Never --image=alpine/git -- sh
USER=fauserics
PAT='ghp_xxx'

# Forzamos verbosidad y límite de velocidad para que NO cuelgue eternamente
GIT_CURL_VERBOSE=1 git -c http.lowSpeedLimit=1 -c http.lowSpeedTime=5 \
  ls-remote https://$USER:$PAT@github.com/fauserics/sas.git | head
exit

# dentro de un pod de prueba (curlbox)
curl -sS -u "fauserics:$PAT" -H 'User-Agent: curl' \
  https://api.github.com/repos/fauserics/sas/contents/ | head

/*prubea final*/
# abre una shell en un pod de prueba con git
kubectl run gitbox -n <tu-ns> --rm -it --restart=Never --image=alpine/git -- sh

USER=fauserics
PAT='PEGA_AQUI_TU_PAT'

# Verboso + timeouts (para que no “cuelgue”)
GIT_CURL_VERBOSE=1 git -c http.lowSpeedLimit=1 -c http.lowSpeedTime=5 \
  ls-remote https://$USER:$PAT@github.com/fauserics/sas.git | head
exit


'


'
